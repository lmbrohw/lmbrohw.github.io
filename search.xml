<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TCP 重传、滑动窗口、流量控制、拥塞控制</title>
      <link href="/tcpcontrol/"/>
      <url>/tcpcontrol/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此文内容全部基于<a href="https://xiaolincoding.com/network/">小林Coding图解网络系列</a>，将此记录在博客中也是为了方便自己查阅和复习，如有任何侵权等问题，联系我立即删除！</p></blockquote><hr><div align="center"><strong><font size="5">TCP 重传、滑动窗口、流量控制、拥塞控制</font></strong></div><hr><h1 id="TCP-重传、滑动窗口、流量控制、拥塞控制"><a href="#TCP-重传、滑动窗口、流量控制、拥塞控制" class="headerlink" title="TCP 重传、滑动窗口、流量控制、拥塞控制"></a>TCP 重传、滑动窗口、流量控制、拥塞控制</h1><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/tcp9.png" alt=""></p><h1 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h1><ul><li>超时重传</li><li>快速重传</li><li>SACK</li><li>D-SACK</li></ul><h2 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h2><blockquote><p>RTT：往返时延—————-指的是<strong>数据发送时刻到接收到确认的时刻的差值</strong></p><p>RT0：超时重传时间</p></blockquote><p><code>RT0应该略大于RTT</code>，当时间超过RT0还没有收到ACK，则重传报文。</p><h2 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h2><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2023-06-07%2015.21.18.png" alt=""></p><h2 id="选择性确认SACK"><a href="#选择性确认SACK" class="headerlink" title="选择性确认SACK"></a>选择性确认SACK</h2><blockquote><p>这种方式需要在 TCP 头部「选项」字段里加一个 <code>SACK</code> 的东西，它<strong>可以将已收到的数据的信息发送给「发送方」</strong>，这样发送方就可以知道哪些数据收到了，哪些数据没收到，知道了这些信息，就可以<strong>只重传丢失的数据</strong>。</p></blockquote><h2 id="Duplicate-SACK"><a href="#Duplicate-SACK" class="headerlink" title="Duplicate SACK"></a>Duplicate SACK</h2><blockquote><p>Duplicate SACK 又称 <code>D-SACK</code>，其主要<strong>使用了 SACK 来告诉「发送方」有哪些数据被重复接收了。</strong></p><ul><li>「接收方」发给「发送方」的两个 ACK 确认应答都丢失了，所以发送方超时后，重传第一个数据包（3000 ~ 3499）</li><li><strong>于是「接收方」发现数据是重复收到的，于是回了一个 SACK = 3000~3500</strong>，告诉「发送方」 3000~3500 的数据早已被接收了，因为 ACK 都到了 4000 了，已经意味着 4000 之前的所有数据都已收到，所以这个 SACK 就代表着 <code>D-SACK</code>。</li><li>这样「发送方」就知道了，数据没有丢，是「接收方」的 ACK 确认报文丢了。</li></ul></blockquote><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><blockquote><p>累计确认、累计应答</p><p>接收窗口的大小是<strong>约等于</strong>发送窗口的大小的。</p></blockquote><p>因为滑动窗口并不是一成不变的。比如，当接收方的应用进程读取数据的速度非常快的话，这样的话接收窗口可以很快的就空缺出来。那么新的接收窗口大小，是通过 TCP 报文中的 Windows 字段来告诉发送方。那么这个传输过程是存在时延的，所以接收窗口和发送窗口是约等于的关系</p><h1 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h1><h2 id="1-停止-等待流量控制"><a href="#1-停止-等待流量控制" class="headerlink" title="1.停止-等待流量控制"></a>1.停止-等待流量控制</h2><p>发送一帧，等待应答信号再发送下一帧，如果没有接收到回答，则一直等待，没有计时器。</p><h2 id="2-滑动窗口流量控制"><a href="#2-滑动窗口流量控制" class="headerlink" title="2.滑动窗口流量控制"></a>2.滑动窗口流量控制</h2><p>允许一次发送多个帧，每收到一个帧的确认，发送窗口就向前滑动一个帧的位置。</p><h1 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h1><blockquote><p>拥塞窗口：<strong>拥塞窗口 cwnd</strong>是发送方维护的一个的状态变量，它会根据<strong>网络的拥塞程度动态变化的</strong>。，发送窗口的值是swnd = min(cwnd, rwnd)，也就是拥塞窗口和接收窗口中的最小值。</p><p>慢启动门限 <code>ssthresh</code> ：cwnd超过慢启动门限后，则开始拥塞避免算法</p></blockquote><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2023-06-10%2010.27.40.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcp </tag>
            
            <tag> 面经 </tag>
            
            <tag> 网络 </tag>
            
            <tag> 可靠传输 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP建立连接</title>
      <link href="/tcp/"/>
      <url>/tcp/</url>
      
        <content type="html"><![CDATA[<blockquote><p>此文内容全部基于<a href="https://xiaolincoding.com/network/">小林Coding图解网络系列</a>，将此记录在博客中也是为了方便自己查阅和复习，如有任何侵权等问题，联系我立即删除！</p></blockquote><hr><div align="center"><strong><font size="5">TCP建立连接</font></strong></div><hr><h2 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h2><p><code>注意：第三次握手是可以携带数据的，前两次握手是不可以携带数据的</code></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/tcp0.png" alt=""></p><p>Linux中查看TCP状态</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -nap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2023-06-05%2021.56.28.png" alt=""></p><h2 id="为什么是三次握手"><a href="#为什么是三次握手" class="headerlink" title="为什么是三次握手"></a>为什么是三次握手</h2><h3 id="1-避免历史连接"><a href="#1-避免历史连接" class="headerlink" title="1.避免历史连接"></a>1.避免历史连接</h3><p>简单来说就是，当之前发送第一次握手信息（seq=90）后，客户端宕机了，而且这个 SYN 报文还被网络阻塞了，服务端并没有收到，接着客户端重启后，又重新向服务端建立连接，发送了 SYN（seq = 100）报文。当之前的SYN到达服务器后，会开始第二次握手ack=90+1发给客户端，但此时客户端想要的ack是101，因此发送RST给服务器断开连接。</p><p><code>如果是两次握手的话，当服务器收到seq=90的时候，他就会在发送完ACK后，开始传输数据，这样就可能建立一个历史连接，造成**资源浪费**</code></p><h3 id="2-同步双方初始序列号"><a href="#2-同步双方初始序列号" class="headerlink" title="2.同步双方初始序列号"></a>2.同步双方初始序列号</h3><p>在握手的时候，发送SYN报文，每一次发送了SYN后，都需要有ack=seq+1来回应，表示已经接受了该SYN报文。因此两个SYN报文就需要两个ACK报文来回应，但是因为第二次握手可以将SYN报文和ACK一起发过去，因此就是三次握手。</p><h3 id="3-避免浪费资源"><a href="#3-避免浪费资源" class="headerlink" title="3.避免浪费资源"></a>3.避免浪费资源</h3><p>当服务器收到SYN报文后，发送完ACK报文，建立起一个连接，那么当服务器第二次握手发送的ACK报文如果没有被客户端收到，那么客户端就会重新发送一次SYN报文，这个时候服务器又建立起一个连接，就会浪费。如果客户端发送的 <code>SYN</code> 报文在网络中阻塞了，重复发送多次 <code>SYN</code> 报文，那么服务端在收到请求后就会<strong>建立多个冗余的无效链接，造成不必要的资源浪费。</strong></p><h2 id="为什么建立新连接时序列号要不同"><a href="#为什么建立新连接时序列号要不同" class="headerlink" title="为什么建立新连接时序列号要不同"></a>为什么建立新连接时序列号要不同</h2><p>防止历史报文被新的连接接受，造成数据混乱</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2023-06-05%2022.23.53.png" alt=""></p><h2 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h2><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2023-06-06%2014.54.25.png" alt=""></p><h3 id="TCP挥手一定需要四次吗？"><a href="#TCP挥手一定需要四次吗？" class="headerlink" title="TCP挥手一定需要四次吗？"></a>TCP挥手一定需要四次吗？</h3><p><code>答案是“大多数情况下，三次挥手比四次挥手情况更多“</code></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/tcp4.png" alt=""></p><h3 id="什么情况下是三次挥手"><a href="#什么情况下是三次挥手" class="headerlink" title="什么情况下是三次挥手"></a><strong>什么情况下是三次挥手</strong></h3><p>当被动关闭方（上图的服务端）在 TCP 挥手过程中，「<strong>没有数据要发送」并且「开启了 TCP 延迟确认机制」，那么第二和第三次挥手就会合并传输，这样就出现了三次挥手。</strong></p><p><a href="https://xiaolincoding.com/network/3_tcp/tcp_three_fin.html#%E4%B8%BA%E4%BB%80%E4%B9%88-tcp-%E6%8C%A5%E6%89%8B%E9%9C%80%E8%A6%81%E5%9B%9B%E6%AC%A1%E5%91%A2">https://xiaolincoding.com/network/3_tcp/tcp_three_fin.html#为什么-tcp-挥手需要四次呢</a></p><h3 id="讨论四次挥手中每一次挥手丢失会发生什么。"><a href="#讨论四次挥手中每一次挥手丢失会发生什么。" class="headerlink" title="讨论四次挥手中每一次挥手丢失会发生什么。"></a>讨论四次挥手中每一次挥手丢失会发生什么。</h3><blockquote><p>注意：ACK报文是不会主动重发的，当丢失的报文是ACK报文时，重传的报文是FIN报文！！</p></blockquote><h3 id="为什么需要TIME-WAIT状态"><a href="#为什么需要TIME-WAIT状态" class="headerlink" title="为什么需要TIME_WAIT状态"></a>为什么需要TIME_WAIT状态</h3><blockquote><p>1.<em>原因一：防止历史连接中的数据，被后面相同四元组的连接错误的接收</em></p></blockquote><p>如果TIME_WAIT状态不存在或者时间小于<code>2MSL</code></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2023-06-06%2015.40.15.png" alt=""></p><blockquote><p>2.<em>原因二：保证「被动关闭连接」的一方，能被正确的关闭</em></p></blockquote><p>如果客户端（主动关闭方）最后一次 ACK 报文（第四次挥手）在网络中丢失了，那么按照 TCP 可靠性原则，服务端（被动关闭方）会重发 FIN 报文。</p><p>假设客户端没有 TIME_WAIT 状态，而是在发完最后一次回 ACK 报文就直接进入 CLOSE 状态，如果该 ACK 报文丢失了，服务端则重传的 FIN 报文，而这时客户端已经进入到关闭状态了，在收到服务端重传的 FIN 报文后，就会回 RST 报文。</p><p>服务端收到这个 RST 并将其解释为一个错误（Connection reset by peer），这对于一个可靠的协议来说不是一个优雅的终止方式。</p><h2 id="Socket编程"><a href="#Socket编程" class="headerlink" title="Socket编程"></a>Socket编程</h2><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2023-06-07%2015.02.56.png" alt=""></p><ul><li>服务端和客户端初始化 <code>socket</code>，得到文件描述符；</li><li>服务端调用 <code>bind</code>，将 socket 绑定在指定的 IP 地址和端口;</li><li>服务端调用 <code>listen</code>，进行监听；</li><li>服务端调用 <code>accept</code>，等待客户端连接；</li><li>客户端调用 <code>connect</code>，向服务端的地址和端口发起连接请求；</li><li>服务端 <code>accept</code> 返回用于传输的 <code>socket</code> 的文件描述符；</li><li>客户端调用 <code>write</code> 写入数据；服务端调用 <code>read</code> 读取数据；</li><li>客户端断开连接时，会调用 <code>close</code>，那么服务端 <code>read</code> 读取数据的时候，就会读取到了 <code>EOF</code>，待处理完数据后，服务端调用 <code>close</code>，表示连接关闭。</li></ul><p>这里需要注意的是，服务端调用 <code>accept</code> 时，连接成功了会返回一个已完成连接的 socket，后续用来传输数据。</p><p>所以，监听的 socket 和真正用来传送数据的 socket，是「两个」 socket，一个叫作<strong>监听 socket</strong>，一个叫作<strong>已完成连接 socket</strong>。</p><p>成功连接建立之后，双方开始通过 read 和 write 函数来读写数据，就像往一个文件流里面写东西一样。</p><p>Linux内核中会维护两个队列：</p><ul><li>半连接队列（SYN 队列）：接收到一个 SYN 建立连接请求，处于 SYN_RCVD 状态；</li><li>全连接队列（Accpet 队列）：已完成 TCP 三次握手过程，处于 ESTABLISHED 状态；</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tcp </tag>
            
            <tag> 面经 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文阅读｜CycleGAN</title>
      <link href="/paperreading2/"/>
      <url>/paperreading2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>CycleGAN论文: <a href="https://arxiv.org/pdf/1703.10593.pdf">https://arxiv.org/pdf/1703.10593.pdf</a><br>原作者实现CycleGAN的Pytorch版本: <a href="https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix">https://github.com/junyanz/pytorch-CycleGAN-and-pix2pix</a></p></blockquote><hr><div align="center"><strong><font size="5">理解CycleGAN模型和代码</font></strong></div><hr><h1 id="模型优点"><a href="#模型优点" class="headerlink" title="模型优点"></a>模型优点</h1><p>CycleGAN是一种基于生成对抗网络（GAN）发展而来的无监督机器学习方法。它是在pix2pix的基础上进行改进和扩展的。CycleGAN主要用于处理非配对图片的图像生成和转换任务，可以实现不同风格之间的转换。</p><p>与传统的GAN模型不同，CycleGAN的训练过程中没有配对的数据集。而是通过引入循环一致性损失来实现学习图像之间的映射关系。具体而言，CycleGAN包含两个生成器网络和两个判别器网络。其中，一个生成器负责将图像从源领域转换到目标领域，另一个生成器则相反；两个判别器负责判断生成的图像是否真实。通过交替训练生成器和判别器，CycleGAN能够学习到领域之间的映射规律。</p><p>CycleGAN广泛应用于图像风格转换任务。例如，它可以将照片转换为油画风格或将橘子转换为苹果，甚至可以进行马和斑马之间的图像转换。由于CycleGAN不需要成对的数据集，因此在数据准备上更加简单，具有很大的应用前景。</p><h1 id="模型结构"><a href="#模型结构" class="headerlink" title="模型结构"></a>模型结构</h1><p>CycleGAN由两个生成器和两个判别器构成</p><blockquote><p>G_AtoB() 是风格A向风格B的生成网络<br>G_BtoA() 是风格B向风格A的生成网络<br>dis_A() 是判别输入图片是否属于风格A的判别网络<br>dis_B() 是判别输入图片是否属于风格B的判别网络</p></blockquote><ol><li>G_AtoB()和G_BtoA()的输入为[B, C, W, H]，即batchsize, channels, width, height，输出与输入相同；</li><li>dis_A()和dis_B()的输入为[B, C, W, H]，即batchsize, channels, width, height，输出的维度是[B, 1]，网络中经过sigmoid函数输出，最后的取值范围在[0, 1]进行分类。</li></ol><blockquote><p>real_A 是从风格A的真实照片<br>real_B 是从风格B的真实照片<br>AtoB = G_AtoB(real_A) 是real_A经过生成网络转换得到的风格B的照片<br>BtoA = G_BtoA(real_B) 是real_B经过生成网络转换得到的风格A的照片</p></blockquote><p>下面是模型结构图</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/CycleGANModel.png" alt=""></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/CycleGANModel2.png" alt=""></p><h1 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h1><p>生成器是由编码器、转换器和解码器组成的。</p><h2 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h2><p>编码器由三层卷积网络构成，假设编码器的输入为[1 3 256 256]，经过一层卷积层，变成[1 64 256 256]，经过第二层卷积层变成[1 128 128 128]，经过第三层卷积层变成[1 256 64 64]。</p><p>具体代码实现细节如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding_mode<span class="token operator">=</span><span class="token string">'reflect'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nn,Conv2d（输入通道数，输出通道数，卷积核大小， 步长，填充大小（默认填充0），填充模式=‘reflect’）其中采用的是InstanceNorm2d，并没有采用Normalization进行归一化。</p><p>Batch Normalization是指batchsize图片中的每一张图片的同一个通道一起进行Normalization操作。而Instance Normalization是指单张图片的单个通道单独进行Noramlization操作。</p><h2 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h2><p>本文转换器使用的是残差网络，<strong>残差网络</strong>目前大部分采用基于梯度的BP算法进行优化，该网络通常将输入信号向前传播，然后通过逆向传输误差值并利用梯度法更新参数。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/resnet.jpg" alt=""></p><p>残差网络除了减弱梯度消失外，还可以理解为这是一种自适应深度，也就是网络可以自己调节层数的深浅，至少可以退化为输入，不会变得更糟糕。可以使网络变得更深，更加的平滑，使深度神经网络的训练成为了可能。</p><p>原文中的描述是如果输入的图片大小是128x128就用6个残差块，如果图片大小是256x256就用9个残差块，残差网络的输入个输出大小一致，所以都是编码器的[1 256 64 64]</p><p>具体代码实现细节如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ResidualBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>ResidualBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        block <span class="token operator">=</span> <span class="token punctuation">[</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> padding_mode <span class="token operator">=</span> <span class="token string">'reflect'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span> padding_mode <span class="token operator">=</span> <span class="token string">'reflect'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        self<span class="token punctuation">.</span>block <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>block<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">+</span> self<span class="token punctuation">.</span>block<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文中使用9个残差块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            model <span class="token operator">+=</span> <span class="token punctuation">[</span>                ResidualBlock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解码器"><a href="#解码器" class="headerlink" title="解码器"></a>解码器</h2><p>解码器中用到的是反卷积（逆卷积）和卷积层，经过残差结构的tensor为[1 256 64 64]，经过第一层反卷积得到[1 128 128 128]经过第二层反卷积层得到[1 64 256 256]，再经过卷积层得到[1 3 256 256]，得到1张3通道的256x256的图片。</p><p>具体代码实现细节如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>output_padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ConvTranspose2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>output_padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>padding_mode<span class="token operator">=</span><span class="token string">'reflect'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Tanh<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后经过Tanh映射到[-1 1]上，输出生成器重建的图像。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/GeneratorArgument.png" alt="" title="生成器网络参数信息表"></p><h1 id="判别器"><a href="#判别器" class="headerlink" title="判别器"></a>判别器</h1><p>判别器使用的是PatchGAN结构，普通的GAN判别器是将输入直接映射成一个表示输入样本是否为真样本的概率值，而PatchGAN是将输入映射为 N×N 的矩阵 X ，其中 X_ij 表示其中一个patch为真实样本的概率，然后将 X_ij 累加再求均值，即得到判别器的最终输出。</p><p>输入图像首先经过卷积核大小为4×4，步长为2，滤波器数量分别为64、128、256的三个卷积层，然后经过卷积核大小为4×4，步长为1，滤波器数量分别为512和1的两个卷积层，得到尺寸大小为30×30×1 的张量，最后经过均值池化层求平均值得到大小为 1×1×1 的张量，再通过调整该张量的维度，得到最终判断输入样本为真实样本的概率值 p。</p><p>具体代码实现细节如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>InstanceNorm2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>LeakyReLU<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后再经过：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">F<span class="token punctuation">.</span>avg_pool2d<span class="token punctuation">(</span>x<span class="token punctuation">,</span> x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>view<span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/DiscriminatorArgument.png" alt="" title="判别器网络参数信息表"></p><h1 id="训练细节"><a href="#训练细节" class="headerlink" title="训练细节"></a>训练细节</h1><h2 id="数据读取"><a href="#数据读取" class="headerlink" title="数据读取"></a>数据读取</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ImageDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root <span class="token operator">=</span> arg<span class="token punctuation">.</span>train_dataroot<span class="token punctuation">,</span> unaligned<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>        transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>size<span class="token operator">*</span><span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interpolation <span class="token operator">=</span> Image<span class="token punctuation">.</span>BICUBIC<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#调整输入图片的大小</span>        transforms<span class="token punctuation">.</span>RandomCrop<span class="token punctuation">(</span>arg<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">#随机裁剪</span>        transforms<span class="token punctuation">.</span>RandomHorizontalFlip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">#随机水平翻转图像</span>        transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        transforms<span class="token punctuation">.</span>Normalize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>unaligned <span class="token operator">=</span> unaligned        self<span class="token punctuation">.</span>files_A <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>train_dataroot<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'/*.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>files_B <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span>root <span class="token operator">+</span> <span class="token punctuation">(</span>arg<span class="token punctuation">.</span>train_dataroot<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'/*.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>        item_A <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>files_A<span class="token punctuation">[</span>index <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>files_A<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>unaligned<span class="token punctuation">:</span>            item_B <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>files_B<span class="token punctuation">[</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>files_B<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            item_B <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>files_B<span class="token punctuation">[</span>index <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>files_B<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token string">'A'</span><span class="token punctuation">:</span> item_A<span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">:</span> item_B<span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>files_A<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>files_B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">train_data_loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    train_data_loader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>ImageDataset<span class="token punctuation">(</span>unaligned<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span>arg<span class="token punctuation">.</span>batchSize<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> drop_last<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train_data_loader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练数据集文件的存放要求：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span>A2B<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>train<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>A<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>A_images<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>B<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>B_images<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过调用train_data_loader()函数得到字典格式的数据，可以通过data[‘A’]，和data[‘B’]操作将不同类型的图片取出来。</p><p>其中的图片还会经过：</p><blockquote><p>调整图片大小至[1.2size 1.2size]<br>随机裁减至[size size]大小<br>随机水平反转<br>归一化</p></blockquote><h2 id="生成图片缓冲区"><a href="#生成图片缓冲区" class="headerlink" title="生成图片缓冲区"></a>生成图片缓冲区</h2><p>为了使训练模型更加稳定，实验设置了一个图像缓冲区，用来存储在训练过程中生成器生成的动漫风格图像。在单独训练判别器时，随机混合加载缓冲区里面的动漫风格图像和当前轮生成器最新生成的图像。该缓冲区的大小由变量max_size控制，本实验中默认设置为50。通过传入这种不同时间生成的动漫风格图像给判别器进行训练，可以极大地提升模型训练的稳定性，保证损失函数的值不会大幅度的上下波动。</p><p>具体代码实现细节如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ReplayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> max_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>max_size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Empty buffer or trying to create a black hole. Be careful.'</span>        self<span class="token punctuation">.</span>max_size <span class="token operator">=</span> max_size        self<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">def</span> <span class="token function">push_and_pop</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>        to_return <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> element <span class="token keyword">in</span> data<span class="token punctuation">.</span>data<span class="token punctuation">:</span>            element <span class="token operator">=</span> torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span>element<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>max_size<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>element<span class="token punctuation">)</span>                to_return<span class="token punctuation">.</span>append<span class="token punctuation">(</span>element<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">:</span>                    i <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>max_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                    data_index<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>                    to_return<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> element                <span class="token keyword">else</span><span class="token punctuation">:</span>                    to_return<span class="token punctuation">.</span>append<span class="token punctuation">(</span>element<span class="token punctuation">)</span>        <span class="token keyword">return</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>to_return<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>缓冲区的数据初始化大小为50，当缓冲区没有图片的时候，我们把输入的data写入缓冲区，并且返回输入图片，当缓冲区满的时候，50%的可能会随机更新缓冲区数据，将新的数据放进来，替换掉之前生成的数据，之前的数据返回，也会有50%的可能直接返回输入的data数据。</p><h2 id="更新学习率"><a href="#更新学习率" class="headerlink" title="更新学习率"></a>更新学习率</h2><p>学习率初始为0.0002，总的epoch为200，在0-100的时候，学习率为0.0002，在100-200的时候，学习率逐渐线性减小为0，所以需要进行学习率的更新。</p><p>pytorch中提供了torch.optim.lr_scheduler.LambdaLR（）函数，其中的学习率衰减需要自己编写函数设定。</p><p>利用python实现为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyLambdaLR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_epochs<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> decay_start_epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>n_epochs <span class="token operator">=</span> n_epochs        self<span class="token punctuation">.</span>offset <span class="token operator">=</span> offset        self<span class="token punctuation">.</span>decay_start_epoch <span class="token operator">=</span> decay_start_epoch    <span class="token keyword">def</span> <span class="token function">step</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> epoch<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1.0</span> <span class="token operator">-</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> epoch <span class="token operator">+</span> self<span class="token punctuation">.</span>offset <span class="token operator">-</span> self<span class="token punctuation">.</span>decay_start_epoch<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_epochs <span class="token operator">-</span> self<span class="token punctuation">.</span>decay_start_epoch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模型初始化"><a href="#模型初始化" class="headerlink" title="模型初始化"></a>模型初始化</h2><p>在第一次训练的时候对模型中参数进行初始化。学习率的初始值为0.0002，模型会迭代训练200个epoch，因此，我们考虑在第0-100个epoch期间，学习率为0.0002，在训练达到第100个epoch时，学习率将开始线性减小，直到减小为0。</p><p>参数初始化代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">weights_init_normal</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    classname <span class="token operator">=</span> m<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__name__    <span class="token keyword">if</span> classname<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'Conv'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> classname<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'BatchNorm2d'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>        torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">.</span>data<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="保存图片"><a href="#保存图片" class="headerlink" title="保存图片"></a>保存图片</h2><p>在训练中得到的结果都是tensor，如何由张量得到图片进行存储和查看，也是十分重要。下面的代码使gpu上的 -1～1 之间的数据转化为0-255之间的值。</p><p>具体代码实现细节如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">TensorToImage</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">:</span>    real_image <span class="token operator">=</span> <span class="token number">255</span><span class="token operator">*</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span>cpu<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span> <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span>    real_image <span class="token operator">=</span> real_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    real_image <span class="token operator">=</span> real_image<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> real_image<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 文献阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cyclegan </tag>
            
            <tag> 风格迁移 </tag>
            
            <tag> image-to-image translation </tag>
            
            <tag> 图像处理 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch学习｜动态计算图与线性回归</title>
      <link href="/pytorchlearning1/"/>
      <url>/pytorchlearning1/</url>
      
        <content type="html"><![CDATA[<p>参考</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/265394674">PyTorch 学习笔记汇总</a><br><a href="https://blog.csdn.net/sinat_28731575/article/details/90342082">pytorch中backward()函数详解</a></p></blockquote><hr><div align="center"><strong><font size="5">PyTorch学习｜动态计算图与线性回归</font></strong></div><hr><h1 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h1><p>PyTorch 采用的是动态图机制（Dynamic Computational Graph），而 Tensorflow 采用的是静态图机制。（Static Computational Graph）</p><p>动态图运算和搭建同时进行，也就是可以先计算前面的节点值，再根据这些值搭建后面的计算图。而静态图需要先搭建图，然后再输入数据进行运算。</p><p>PyTorch 动态图的优点是灵活，易调节，且使用简单方便。（类似 Python 库）但是其效率相对 Tensorflow 的静态图要低不少。</p><h2 id="计算动态图"><a href="#计算动态图" class="headerlink" title="计算动态图"></a>计算动态图</h2><p>计算图是用来描述运算的有向无环图，有两个主要元素：节点 （Node） 和边 （Edge）。节点表示数据，如向量、矩阵、张量。边表示运算，如加减乘除卷积等。</p><p>一个简单的例子$y=(m+n)(m-n)$ ，该式子用计算图表示为：</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/dynamicPic.png" alt=""></p><h2 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h2><p>对于上式，分别求y在$m=2,n=3$时，关于$m,n$导数：</p><script type="math/tex; mode=display">\begin{equation}\frac{\partial y}{\partial m}=\frac{\partial\left(m^2-n^2\right)}{\partial m}=2 m=4\end{equation}</script><p>同理：</p><script type="math/tex; mode=display">\begin{equation}\frac{\partial y}{\partial n}=\frac{\partial\left(m^2-n^2\right)}{\partial n}=-2 n=-6\end{equation}</script><p>PyTorch中，<code>torch.backward()</code>会提供求导的功能，代码如下（注意，当计算图中的根不是标量时，即因变量为一个向量时，会构建出多个计算图对该向量中的每个元素分别进行求导，详见 <a href="https://blog.csdn.net/sinat_28731575/article/details/90342082">pytorch中backward()函数详解</a> ）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torchm <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>n <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3.</span><span class="token punctuation">]</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>a <span class="token operator">=</span> torch<span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>add<span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">)</span>y <span class="token operator">=</span> torch<span class="token punctuation">.</span>mul<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>y<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m的梯度：'</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n的梯度'</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>grad<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'m is_leaf：'</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>is_leaf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n is_leaf：'</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>is_leaf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'a is_leaf：'</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span>is_leaf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'b is_leaf：'</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>is_leaf<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'y is_leaf：'</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>is_leaf<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">m的梯度： tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>n的梯度 tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6.</span><span class="token punctuation">]</span><span class="token punctuation">)</span>m is_leaf： <span class="token boolean">True</span>n is_leaf： <span class="token boolean">True</span>a is_leaf： <span class="token boolean">False</span>b is_leaf： <span class="token boolean">False</span>y is_leaf： <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且由打印可知，可以看出$m$和$n$的 is_leaf 属性为 true，这是由于$a$、$b$、$y$ 是依赖$m$和$n$的，故$m$$n$为叶子节点。叶子节点的概念主要是为了节省内存，在计算图中的一轮反向传播结束之后，非叶子节点的梯度是会被释放的，所以直接访问非叶子节点的梯度是为空的。但是如果在反向传播结束之后仍然需要保留非叶子节点的梯度，可以对节点使用<code>retain_grad()</code>方法。</p><p>张量Tensor中，属性grad_fn记录了创建该张量时使用的方法（函数），故而可以在调用<code>torch.backward()</code>时自动求导。</p><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>线性回归是分析一个变量y与另外一 (多) 个变量x之间的关系的方法。一般可以写成 $y=wx+b$ 线性回归的目的就是求解参数$w$，$b$。其主要步骤：</p><p>① 确定模型（实际使用中，可能是一个隐函数）： $y=wx+b$；</p><p>② 选择损失函数，一般使用均方误差MSE（mean square error）：$\frac{1}{m} \sum_{i=1}^m\left(y_i-\hat{y}_i\right)^2$；</p><p>③ 使用梯度下降法求解梯度，并根据学习率  $lr$更新参数，以此来最小化损失函数。</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{array}{c}w=w-l r * w . g r a d \\b=b-l r * b . g r a d\end{array}\right.\end{equation}</script><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plttorch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>lr <span class="token operator">=</span> <span class="token number">0.05</span>  <span class="token comment"># 学习率</span><span class="token comment"># 创建训练数据</span>x <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span>  <span class="token comment"># x data (tensor), shape=(20, 1)</span><span class="token comment"># torch.randn(20, 1) 用于添加噪声</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># y data (tensor), shape=(20, 1)</span><span class="token comment"># 构建线性回归参数</span>w <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 设置梯度求解为 true</span>b <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 设置梯度求解为 true</span><span class="token comment"># 迭代训练 100 次</span><span class="token keyword">for</span> iteration <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 前向传播，计算预测值</span>    wx <span class="token operator">=</span> torch<span class="token punctuation">.</span>mul<span class="token punctuation">(</span>w<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    y_pred <span class="token operator">=</span> torch<span class="token punctuation">.</span>add<span class="token punctuation">(</span>wx<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    <span class="token comment"># 计算 MSE loss</span>    loss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>y <span class="token operator">-</span> y_pred<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 反向传播</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 更新参数</span>    b<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sub_<span class="token punctuation">(</span>lr <span class="token operator">*</span> b<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>    w<span class="token punctuation">.</span>data<span class="token punctuation">.</span>sub_<span class="token punctuation">(</span>lr <span class="token operator">*</span> w<span class="token punctuation">.</span>grad<span class="token punctuation">)</span>    <span class="token comment"># 每次更新参数之后，都要清零张量的梯度</span>    w<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">.</span>grad<span class="token punctuation">.</span>zero_<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 绘图，每隔 20 次重新绘制直线</span>    <span class="token keyword">if</span> iteration <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> y_pred<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'r-'</span><span class="token punctuation">,</span> lw<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'Loss=%.4f'</span> <span class="token operator">%</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> fontdict<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span>  <span class="token string">'red'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Iteration: {}\nw: {} b: {}"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>iteration<span class="token punctuation">,</span> w<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>pause<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>        <span class="token comment"># 如果 MSE 小于 1，则停止训练</span>        <span class="token keyword">if</span> loss<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/pytorch.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文翻译｜CycleGAN</title>
      <link href="/paperreading1/"/>
      <url>/paperreading1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>论文原文 <a href="https://ieeexplore.ieee.org/document/8237506">https://ieeexplore.ieee.org/document/8237506</a><br>arxiv版本 <a href="https://arxiv.org/pdf/1703.10593.pdf">https://arxiv.org/pdf/1703.10593.pdf</a></p></blockquote><hr><div align="center"><strong><font size="5">使用循环一致的对抗网络进行未配对图像到图像的转换</font></strong></div><hr><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/cover.png" alt="" title="给定任意两个无序的图像集X和Y，我们的算法学习自动将一张图片从一种风格转换到另一种风格，反之亦然。示例应用（底部）：使用一位著名艺术家的画集，学习到将用户的照片以这样的风格展示出来"></p><h1 id="1-摘要"><a href="#1-摘要" class="headerlink" title="1 摘要"></a>1 摘要</h1><p>图像到图像的转换是一类关于视觉和图像的问题，这类问题的目的是通过使用成对的图片作为训练集，学习到输入图像和输出图像的映射关系。然而，对于很多任务来说，成对的训练数据是无法得到的。我们提出了一种在没有成对的数据的情况下学习将图像从源域X转换到目标域Y的方法。我们的目标是通过使用一种对抗损失函数学习一种映射G:X→Y，使得判别器无法分辨出图像G(X)和图像Y。由于该映射受到巨大的限制，因此我们为映射G搭配一个相反的映射F:Y→X，同时加入一个循环一致性损失函数来确保F(G(X)) ≈ X（反之亦然）。在不存在成对训练数据的情况下，我们比较了风格迁移、物品变形、季节转换、照片增强等几个任务的定性结果，都证明了我们的方法较之前几种方法的优越性。</p><h1 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2 介绍"></a>2 介绍</h1><p>在1873年某一个晴朗的春日，当Claude Monet把他的绘画架放置在Argenteuil附近的塞纳河畔，他看到了什么？如果彩色照片在当时就已被发明的话，或许就能记录下这清澈的河流以及倒映在河流里的蓝天，Monet通过他纤细的画笔和明亮的调色板将这一场景给传达出来了。如果Monet画画的事情发生在 Cassis 小港口的一个凉爽的夏夜，那么会发生什么？漫步在一个挂满Monet画作的画廊里，我们可以轻易地想象到他会在画作中怎样描绘这些场景：或许是在淡雅的夜色中添上令人惊艳的一笔，或是变化平缓的光影范围。</p><p>我们可以想象这些所有的东西，尽管从未见过Monet画作中的对应真实景象的照片。取而代之的是，我们已经了解过Monet画作和风景照片，我们可以推断出这两者的差异，同时据此想象出从一种风格转换到另一种风格的样子。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/2.png" alt="" title="配对的训练数据（左）组成训练示例{x_{i},y_i }_(i=1)^N，其中yi与给定的每一个xi对应。与之不同的是我们用未配对的训练数据（右）组成源集{x_i }_(i=1)^N∈X和目标集{y_i }_(i=1)^M∈Y，其中没有提供关于哪一个xi匹配哪一个yi的信息"></p><p>在这篇文章中，我们提出了一个能够学习做相同的事情的系统：在缺乏成对训练图像的情况，捕捉一张图像数据集的特征，并弄清楚怎样把这些特征转换到其他图像数据集上。</p><p>这个问题可以描述成广义的图像到图像的转换，从给定的场景x完成一张图像到另一个场景y的转换。举例：灰度图片到彩色图片，图像到语义标签，轮廓到图片。发展了多年的计算机视觉、图像处理和图形学学界提出了强大的有监督翻译系统，它需要成对的数据{x,y}。然而，获取成对的训练数据是非常困难且昂贵的。例如，只有几对用于语义分割的数据集，并且它们很小。在艺术风格化这样的图像任务中，获取输入输出图像对会更困难，因为所需的输出图像非常复杂，特别是艺术创作。对于许多任务而言，就像物体变形这一类任务的输出更加不容易定义。</p><p>因此我们寻找一种可以在没有成对输入输出示例情况进行两种域之间转换的算法，我们假设这两个域之间有某种特定的关系。例如，它们是同一特定场景的两种不同渲染风格，我们来探索学习这种关系。尽管缺少成对数据的监督样本，我们仍然可以在集合层面使用监督学习：在给出X域图像和另一组不同的Y域图像，我们可以训练出一个映射G：X → Y 使得输出y=G(x)，x∈X，与图像y难以被判别器区分开，该判别器被训练用来区分生成样本yi和真实样本y。理论上，这一项将包括符合经验分布PY(y)的y’的输出分布（通常这要求G是随机的）。因此有一个最佳的映射G将X域转换为与Y域有相同分布的Y’域。然而，这样的转换不能保证独立分布的输入x和输出y在某种意义上配对——这儿有很多的映射G可以导出与y’一样的分布。不止如此，实际上，我们发现单独优化判别器是困难的：标准程序通常会导致出现众所周知的模式崩溃问题，即所有不同的输入图像都映射成相同的输出图像并且优化无法继续。</p><p>为了解决这个问题，我们在我们的模型中添加了更多的结构。因此，我们利用转换需要具有“循环一致性”的属性，在某种意义上，如果我们翻译英语到法语，然后又将法语翻译回英语，我们应该能够回到原始的那个英语句子。从数学上讲，如果我们有一个函数G：X→Y和一个函数F：Y→X，函数G和函数F能够相互颠倒，那么这两个函数映射是双射。我们将这个结构应用到映射G和F的同步训练中，并且加入一个循环一致性损失函数以保证F(G(x))≈x和G(F(y))≈y。合并这个损失函数与在X域Y域的对抗损失函数就能实现非成对的图像到图像转换的目标。</p><p>我们将这个方法应用到更广的领域上，包括风格迁移、物体变形、属性迁移和图像增强。我们将其与之前的方法比较，以前的方法依赖人工定义风格内容，或者共享的内部参数，并且我们这个方法优于这些baseline，我们在<a href="https://github.com/junyanz/CycleGAN">https://github.com/junyanz/CycleGAN</a> 提供我们的代码，在<a href="https://arxiv.org/abs/1703.10593">https://arxiv.org/abs/1703.10593</a> 处查看论文的所有版本</p><h1 id="3-相关工作"><a href="#3-相关工作" class="headerlink" title="3 相关工作"></a>3 相关工作</h1><p>对抗生成网络在图像生成、图像编辑和表征学习等领域取得了瞩目的成就。近段时间的几种条件图像生成方法也采用了相同的思路。例如文本转图像、图像修复和视频预测等其他领域，比如视频和三维数据。对抗生成网络成功的关键是：对抗损失函数促使生成的图像在原则上与真实图像无法区分开。这对于图像生成任务特别有用，图像生成正是很多计算机图像任务致力于优化的目标。我们采用对抗损失函数来学习一种这样的映射关系，以致于转换得到图像与目标域的图像难以区分。</p><p>图像到图像的转换的想法至少可以追溯到Hertzmann等人的图像类比，该模型在一对输入输出的训练图像上采用一个无参的纹理模型。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/3.png" alt="" title="我们的模型包含两个映射函数G：X→Y和F：Y→X，相关的对抗判别器DY和DX。DY使G将X转换到与Y域无法区分的输出，反过来对于DX，F和X同样适用，为了进一步规范化映射函数，我们引入了两个“循环一致性损失”来确保如果我们将图像从一个域转换到其它域，然后再转换回来，我们应该得到最开始的图像：（b）前向循环一致性损失：x→G(x) →F(G(x)) ≈x，（c）后向循环一致性损失：y→F(y) →G(F(y)) ≈y"></p><p>近段时间的更多方法则使用一个输入输出样例数据集训练卷积神经网络。我们的研究建立在Isola等人的pix2pix框架上，这个框架使用条件对抗生成网络学习输入到输出的映射。类似的想法也应用在诸如从轮廓、图像属性、布局语义生成图片这类任务中，然而，与之前工作不同的是，我们在没有成对训练样例情况下学习映射关系。</p><p>其他几个旨在关联两个数据域X和Y的方法也解决了不成对数据的问题。最近，Rosales等人提出了一个贝叶斯框架，通过对原图像以及从多风格图像中得到的似然项进行计算，得到一个基于区块、基于先验信息的马尔可夫随机场。更近一些的研究中，CoupledGANs和跨膜态场景网络则使用一种权重共享策略来学习跨领域的通用表达。与我们这个方法同时期的研究，有Liu等人将变分自编码和对抗生成网络相结合来扩展网络模型。同时期的另一个研究尝试让输入和输出共享特定的“内容”特征，即使他们所属不同风格。他们也使用对抗网络并添加一些项目来促使输出在预先定义的度量空间内更接近于输入。例如标签分类空间、图片像素空间和图像特征空间。</p><p>不同于以上方法，我们的设计不依赖任何特定任务和预定义输入输出似然函数，也不要求输入和输出在一个相同的低纬度嵌入空间。因此我们的方法对于许多视觉和图像任务是一个通用的解决方案。我们直接在5.1节将本方案与先前的方法进行比较。与我们工作同时期的，在相同的程序中，Yi等人受到机器翻译中双重学习的启发，单独给未配对的图像到图像的转换引入一个相似的目标。</p><p>将可传递性(transitivity)作为一种结构数据规范化的方式由来已久，几十年来，在视觉追踪(visual tracking)任务中，确保简单的前后向传播一致 (simple forward-backward consistency) 已经成为一个标准。在语言处理领域，“反向翻译与核对（back translation and reconsiliation）”是翻译员用来验证并提高翻译质量的一种技术，机器翻译也是如此。最近，高阶循环一致性已经被用于动作检测、三维目标匹配、协同分割、稠密语义分割校准和景物深度估计。其中，Zhou和Godard等人的工作与我们最为相似。他们使用循环一致性损失作为一种用可传递性监督CNN训练的方式。在这工作中，我们将引入类似的损失来让生成器G和F彼此保持一致。</p><p>神经风格迁移是另一种优化图像到图像转换的方法，通过将一张图像的内容与另一图像的风格基于匹配预训练期的深度特征的伽马矩阵统计信息相结合，从而合成一幅新的图像。另一方面，我们主要关注的是：通过尝试刻画更高层级外观结构之间的对应关系，学习两种图像风格域之间的映射关系，而不是两张特定的图片。因此，我们的方法能适用于其他任务，例如绘画转图片，物体变形等单个样品转换方法表现不好的地方。我们在5.2节比较了这两种方法。</p><h1 id="4-方法"><a href="#4-方法" class="headerlink" title="4 方法"></a>4 方法</h1><p>我们的目标是学习两个给定训练样本中数据域X与Y之间的映射函数，其中：</p><script type="math/tex; mode=display">\begin{array}{ll}\left\{x_{i}\right\}_{i=1}^{N} & x_{i} \in X, x \sim p_{\text {data }}(x) \\\left\{y_{i}\right\}_{i-1}^{M} & y_{i} \in Y, y \sim p_{\text {data }}(y)\end{array}</script><p>如图3所示，我们的方法包含了两个映射函数：</p><script type="math/tex; mode=display">\begin{array}{ll}\left\{x_{i}\right\}_{i=1}^{N} & x_{i} \in X, x \sim p_{\text {data }}(x) \\\left\{y_{i}\right\}_{i-1}^{M} & y_{i} \in Y, y \sim p_{\text {data }}(y)\end{array}</script><p>另外，我们引入了两个对抗性判别器DX和DY：DX旨在区分{x} 与转换后的图像 {F(y)}；同样，DY用于区分{y} 与 转换后的图像{G(x)}。我们构建的损失模型包含两部分：对抗损失使生成的图像的分布与目标域的图像的数据分布相匹配；循环一致性损失防止学习到的映射G与F相互矛盾。</p><h2 id="4-1-对抗损失"><a href="#4-1-对抗损失" class="headerlink" title="4.1 对抗损失"></a>4.1 对抗损失</h2><p>我们为两个映射函数都应用了对抗损失，对于映射函数G：X→Y和它的判别器DY，我们有如下的表达式：</p><script type="math/tex; mode=display">\begin{array}{ll}\left\{x_{i}\right\}_{i=1}^{N} & x_{i} \in X, x \sim p_{\text {data }}(x) \\\left\{y_{i}\right\}_{i-1}^{M} & y_{i} \in Y, y \sim p_{\text {data }}(y)\end{array}</script><p>当映射G尝试生成与数据域Y相似的图像G(x)时，判别器DY致力于区分转换得到的G(x)和真正的样例图像y。我们为映射函数F：Y→X和判别器DX引入一个类似的对抗损失函数L_GAN (G,D_X,Y,X)。</p><h2 id="4-2-循环一致性损失"><a href="#4-2-循环一致性损失" class="headerlink" title="4.2 循环一致性损失"></a>4.2 循环一致性损失</h2><p>理论上对抗训练可以学习到映射G和F，并分别生成与目标域Y和X同分布的输出（严格地讲，这要求映射G与F是一个随机函数）。然而在容量较大情况下，网络可以将同一组输入图像映射到目标域中任何随机的图像排列，同时目标域中任何学习到的映射都可以产生与目标分布相匹配的输出分布。为了进一步减少可能的映射函数的空间，我们认为学习到的映射函数应该具有循环一致性，对于域X中的每一张图像x，该图像转换循环应该能够让图像x转换回到原始图像：x→G(x) →F(G(x)) ≈x,我们称之为前向循环一致性。类似地，对于Y域中的每一张图像y，生成器G和F也应该满足后向循环一致性：y→F(y) →G(F(y)) ≈y我们可以使用一个循环一致性损失来激励这种行为：</p><script type="math/tex; mode=display">\begin{aligned}\operatorname{Loss}_{\text {cycle }}=\mathbb{E}_{x \sim p_{\text {data }}(x)}\left[\|F(G(x))-x\|_{1}\right] \\&+\mathbb{E}_{y \sim p_{\text {data }}(y)}\left[\|G(F(y))-y\|_{1}\right] .\end{aligned}</script><p>在预备实验中，我们也尝试用F(G(x)) 与x 之间、G(F(Y)) 与y 之间的对抗损失代替损失中的L1 范数，但是没有观察到更好的性能。在arXiv版本中可以观察到由循环一致性损失引起的行为。</p><h2 id="4-3-完整的模型"><a href="#4-3-完整的模型" class="headerlink" title="4.3 完整的模型"></a>4.3 完整的模型</h2><p>我们的完整的模型对象是：</p><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}\left(G, F, D_{X}, D_{Y}\right)=& \mathcal{L}_{\mathrm{GAN}}\left(G, D_{Y}, X, Y\right) \\&+\mathcal{L}_{\mathrm{GAN}}\left(F, D_{X}, Y, X\right) \\+\lambda \mathcal{L}_{\mathrm{cyc}}(G, F)\end{aligned}</script><p>对象的相对重要性。我们致力于解决:</p><script type="math/tex; mode=display">G^{*}, F^{*}=\arg \min _{G, F} \max _{D_{x}, D_{Y}} \mathcal{L}\left(G, F, D_{X}, D_{Y}\right)</script><p>法能被看作训练两个 “自动编码器”：</p><script type="math/tex; mode=display">\begin{aligned}&F \circ G: X \rightarrow X \\&G \circ F: Y \rightarrow Y\end{aligned}</script><p>然而，每一个自动编码器都有特殊的内部结构：它们通过中间介质将图片映射到自身，这个中间介质是图像的另一个域的转换。这种配置也可以被视为一个“对抗性自动编码器”的特例，它使用对抗损失来训练自动编码器的瓶颈层，以匹配任意的目标分布。在我们的例子里，X→Y自动编码器的目标分布是Y域分布。在5.1.3节，我们将我们的方法与消去了完整对象的模型进行比较，经验表明，这两个对象（损失函数）在获得高质量结果上起关键作用。</p><h1 id="5-实现"><a href="#5-实现" class="headerlink" title="5 实现"></a>5 实现</h1><p>我们采用了J.Johnson文章中的生成网络架构，J.Johnson等人在神经风格转换和超分辨率方面取得了令人印象深刻的成果。这个网络架构包含两个步长为2的卷积层，几个残差模块和两个1/2步长的卷积层。与Johnson的方法类似，我们使用了正则化，对于判别网络，我们使用70×70的PatchGANs，PatchGANs致力于辨别70×70的重叠图像块的真假。这种补丁级的判别器结构比完整的图像判别器拥有更少的参数，并且可以以一种完全卷积的方式被应用于任意尺寸的图像。</p><p>我们将最近研究工作中的两种技术应用到我们的模型中以稳定模型训练。第一，对于LGAN，我们用最小二乘损失替代负对数似然损失。这个损失函数在训练和生成更高质量的结果期间表现得更稳定。等式1就变为：</p><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}_{\text {LSGAN }}\left(G, D_{Y}, X, Y\right) &=\mathbb{E}_{y \sim p_{\text {data }}(y)}\left[\left(D_{Y}(y)-1\right)^{2}\right] \\&+\mathbb{E}_{x \sim p_{\text {data }}(x)}\left[D_{Y}(G(x))^{2}\right]\end{aligned}</script><p>第二，为了减小模型训练时的震荡，我们遵循Shrivastava 等人的策略，用生成图像的历史而不是最新生成网络产生的图像来更新判别器DX和DY。我们使用一个图像缓存器来存储最近生成的50张图片。</p><p>请参阅我们的arXiv论文来获取更多的关于数据集、体系结构和训练程序的细节。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/4.png" alt="" title="不同方法在城市景观数据上训练的标记→照片的映射，从左至右：输入, BiGAN/ALI, CoGAN, CycleGAN(本方法),在成对数据上训练的pix2pix，以及真实图片"></p><h1 id="6-结果"><a href="#6-结果" class="headerlink" title="6 结果"></a>6 结果</h1><p>我们首先将我们的方法与最近的关于使用成对数据集完成未配对的图像到图像的转换方法做比较，输入输出对可用于评估。然后我们研究了对抗损失和循环一致性损失的重要性，并将我们的方法与方法的几种变体进行比较。最后，在不存在成对数据情况下，我们在更大的应用范围内证明了算法的通用性。为了简洁，我们将我们的方法称为CycleGAN。</p><h2 id="6-1-评估"><a href="#6-1-评估" class="headerlink" title="6.1 评估"></a>6.1 评估</h2><p>我们使用与“pix2pix”相同的评估数据集，并且将我们的方法与几个基线（baseline）进行定量与定性的比较。我们也对全损失函数进行了消融研究。</p><h3 id="6-1-1-Baseline"><a href="#6-1-1-Baseline" class="headerlink" title="6.1.1 Baseline"></a>6.1.1 Baseline</h3><p><strong>CoGAN</strong> 这个方法学习到一个生成X域数据和Y域数据的GAN生成器，前几层进行权重绑定，并共享对数据的潜在表达。通过找到一个生成图像X的潜在表达，然后将这个潜在表达以Y域风格呈现，可以实现从X到Y的风格转换。</p><p><strong>Pixel loss+GAN</strong> 就像我们的方法一样，Shrivastava用一个对抗损失来训练X到Y的转换，正则项‖X−Y‖1用来纠正像素层级上过大的变动。</p><p><strong>Feature loss+GAN</strong> 我们也测试了，使用预训练网络（VGG-16，relu4_2）在图像深度特征上计算L1损失，而不是在RGB像素值上计算。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/6.png" alt="" title="在地图↔航拍图片测试的AMT“real vs fake” "></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/7.png" alt="" title="在城市景观标注图片→照片的评估中得到的不同方法的FCN得分"></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/8.png" alt="" title="不同方法在城市景观图照片→标注的分类性能"></p><p><strong>BiGAN/ALI</strong> 无条件约束GAN训练了一个生成器G：Z→X，将随机噪声Z映射到图像X，BiGAN和ALI提议学习一个逆向映射函数F：X→Z，即使他们最初的设计是为了将一个潜在的向量z映射到图像x，我们实现了相同的目标，将原始图像x映射到目标图像y。</p><p><strong>pix2pix</strong> 我们也同在成对数据上训练的pix2pix做了比较，为了看看在没有使用成对数据情况我们能够与这个上限有多接近。<br>为了公平的比较，我们采用了同我们的方法相同的架构和细节（除了Co GAN）来实现所有的基线模型。由于架构上的差异，我们使用了CoGAN的公共的实现版本。</p><h3 id="6-1-2-与Baseline对比"><a href="#6-1-2-与Baseline对比" class="headerlink" title="6.1.2 与Baseline对比"></a>6.1.2 与Baseline对比</h3><p>如图4图5所示，我们不能在任何基线模型上取得令人信服的结果。另一方面，我们的方法通常能够产生与完全监督的pix2pix具有同等质量的转换结果。我们排除了图像中的pixel loss+GAN和feature loss+GAN，因为这两种方法都无法产生接近目标域的结果。</p><p>此外，我们的方法与基线模型通过三种方式进行了定量比较。首先，我们在AMT工人上进行“真对假”的研究来评估主观现实主义。第二，我们在城市景观数据上训练图片→标签的任务，将输出标签图像与城市景观的标准指标得到的真实图像进行比较。最后，我们在相同的数据集上训练标签→图片任务，用一个现成的全卷积语义分割网络评估输出的图片。我们发现，在这三个实验中，我们的方法明显优于基线模型。表1展示了在AMT感知现实主义任务中的表现。我们看到我们的方法能够在大约四分之一的地图→图片和图片→地图的实验中骗过参与者，而几乎所有的基线模型都不能做到如此。表2和表3评估了在城市景观图像的标注→图片任务的性能，我们的方法在这两种情况下都优于基线模型。每个实验的详细过程和结果可以在我们的arXiv版本中找到。</p><h3 id="6-1-3-消融研究"><a href="#6-1-3-消融研究" class="headerlink" title="6.1.3 消融研究"></a>6.1.3 消融研究</h3><p>我们对全损失的消融进行了比较，图6展示了几个定量示例。移除对抗损失或者循环一致性损失都会大大降低结果质量。因此我们认为这两项对我们实验的结果都至关重要。我们也在单向循环损失上评估了我们的方法：</p><script type="math/tex; mode=display">\begin{aligned}&\mathrm{GAN}+\operatorname{loss} \mathbb{E}_{x \sim p_{\text {data }}(x)}\left[\|F(G(x))-x\|_{1}\right] \\&\mathrm{GAN}+\operatorname{loss} \mathbb{E}_{y \sim p_{\text {data }}(y)}\left[\|G(F(y))-y\|_{1}\right]\end{aligned}</script><p>我们发现它通常会导致训练不稳定，并导致模式崩溃，尤其是对于被移除的映射方向。我们也定量测了城市景观照片→标签任务上的消融，该测量结果可以在我们的论文arXiv版本中找到。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/9.png" alt="" title="在城市景观上训练的标签↔图片映射方法的不同变体。从左至右：输入，单独的循环一致性损失，单独的对抗损失，GAN+前向循环一致性损失，GAN+后向循环一致性损失，CycleGAN（本方法）和真实图像。单独的循环一致性损失和GAN+后向循环一致性损失不能产生与目标域相似的图像。单独的对抗损失和GAN+前向循环一致性损失出现模式崩溃。无论输入图片是什么都能产生完全相同的标签映射"></p><h2 id="6-2-应用"><a href="#6-2-应用" class="headerlink" title="6.2 应用"></a>6.2 应用</h2><p>我们在不存在成对训练数据情况下演示了我们的方法的几种应用，我们观察到在训练数据上的转换比在测试数据上通常更有吸引力。应用在所有训练数据和测试数据的完整结果可以在我们项目的网站上看到。</p><p>这个模型被训练用来将Imagenet上的一类物品转换到另一类（每一类包含大约1000张训练图像）。Turmukhambetov提出了一个子空间模型来将一个物品转换到另一个相同类别的物品，但是我们的方法致力于两个视觉上相似但类别不同的物品之间的变形。</p><p>这个模型在从Flickr下载的Yosemite风景照上进行训练。</p><p>我们用从Flickr和WikiArt下载的风景图片来训练这个模型，注意，与最近的“神经风格迁移”工作不同的是，我们的方法学习仿造艺术作品集，而不是迁移一件艺术作品的风格。在5.2节我们对结果做了对比。</p><p>从画作中生成照片 对于画作→照片，我们发现引入一个额外损失使映射能保持输入输出间的色彩成分是有用的。特别地，在采用了Taigman的技术后，当真实的目标域示例被提供用作生成器的输入，规范化生成器以接近恒等映射。</p><script type="math/tex; mode=display">\begin{aligned}\mathcal{L}_{G A N}(G, F) &=\mathbb{E}_{y \sim p_{\text {dait }}}\left[\|G(y)-y\|_{1}\right] \\&+\mathbb{E}_{x \sim p_{\text {data }}}\left[\|F(x)-x\|_{1}\right]\end{aligned}</script><p>在不使用Lidentity时，生成器G和F可以在对色调没有要求时自由地改变输入图像的色调。例如，当学习Monet画作和Flickr照片之间的映射时，生成器经常将白天的画作映射到黄昏时拍的照片，因为这样的映射在对抗损失和循环一致性损失上可能同等有效。身份映射损失的影响可以在arXiv论文中找到。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/10.png" alt="" title="几个图像转换问题的结果，这些图片是相对成功的结果，有关更全面的结果，请访问我们的网站"></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/11.png" alt="" title="我们将输入的图像转换成不同的艺术风格，请访问我们的网站获取更多示例"></p><p>在图9，我们展示了将Monet画作转换为照片的结果，这些图片显示了被包括在训练集中的画作的转换结果，而本文中的其他实验，我们仅仅评估和展示测试集结果。因为训练集不包括成对数据，所以为训练集提供看似合理的转换结果是一项重要的任务。确实，自从Monet不再创作新的画作时，泛化看不到“测试集”的原画作不是一个迫切的问题。</p><p>我们展示了我们的方法可以被用来生成景深较浅的图片上。我们在从Flickr下载的花朵照片上训练这个模型。源域由智能手机拍摄的花朵的照片组成，这些照片由于拍摄光圈小通常具有很深的景深。目标照片由具有大光圈的单反相机拍摄得到。我们的模型成功地将智能手机拍摄的照片生成为具有较浅景深的图片。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/12.png" alt="" title="Monet画作映射成照片风格的结果，请访问我们的网站获取更多示例"></p><h1 id="7-局限与讨论"><a href="#7-局限与讨论" class="headerlink" title="7 局限与讨论"></a>7 局限与讨论</h1><p>虽然我们的方法在许多情况下可以取得令人信服的结果，但这些结果并不会一直都这样好。图12中展示了几个典型的失败案例，在涉及颜色和纹理变形的任务上，与上面报告中提到的许多任务一样，我们的方法通常能够成功。我们也探索了要求几何变换的任务，但是收效甚微。例如，在猫→狗转换任务中，对风格转换的学习退化为对输入图像进行最小程度的改变。处理更多和更极端的变换，特别是几何变换，这是未来工作的重点问题。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/13.png" alt="" title="照片增强：从一组iPhone照片映射到专业的DSLR照片，系统通常会学习生成短焦点。这里我们展示了测试集中最成功的一些结果——平均性能表现要比这个差得多。请查看我们的网站来了解更全面和随机的示例"></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/14.png" alt="" title="将我们的方法与neural style transfer进行了比较。从左至右：输入图像，使用单个代表性图像作为风格图像的结果，使用目标域所有图像的结果，以及CycleGAN"></p><p>训练集的分布特征也会导致一些案例失败。例如，图12中马→斑马转换任务就因为我们的模型只在ImageNet训练，而不包括人类骑马或斑马的图片而导致失败。</p><p>我们也发现在成对训练数据和非成对训练数据的结果之间存在无法消弭的差距。在一些案例中，这种差距似乎很难甚至不可能消除掉：例如，我们的方法在照片→标签任务的输出中有时会排列树和建筑的标签。要解决这种歧义，可能需要某种形式的弱语义监督。集成的弱监督和半监督数据也许能够形成更强大的转换工具，其成本仍然只是完全监督系统的一小部分。</p><p>尽管如此，在多数情况下，使用非成对数据训练依然是可行的，并且我们应该加以利用。在这种“无监督”的情况下，这篇论文拓展了其可能使用的范围。</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/15.png" alt="" title="方法中的一些失败案例"></p><p>致谢：感谢Aaron Hertzmann，Shiry Ginosar，Deepak Pathak，Bryan Russell，Eli Shechtman，Richard Zhang和Tinghui Zhou的许多有益的评论。这项工作得到了NSF SMA1514512，NSF IIS-1633310，Google Research Award，Intel Corp以及NVIDIA的硬件捐赠支持。JYZ由Facebook Graduate Fellowship支持，TP由三星奖学金支持。大多数用于风格转移的照片在法国由AE拍摄。</p>]]></content>
      
      
      <categories>
          
          <category> 文献阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 风格迁移 </tag>
            
            <tag> CycleGAN </tag>
            
            <tag> 论文翻译 </tag>
            
            <tag> 无监督 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch学习｜张量</title>
      <link href="/pytorchlearning0/"/>
      <url>/pytorchlearning0/</url>
      
        <content type="html"><![CDATA[<p>参考</p><blockquote><p><a href="https://pytorch-cn.readthedocs.io/zh/latest/">PyTorch 中文文档</a><br><a href="https://zhuanlan.zhihu.com/p/265394674">pytorch 学习笔记汇总</a></p></blockquote><hr><div align="center"><strong><font size="5">PyTorch学习｜张量</font></strong></div><hr><h2 id="1-张量Tensor的结构"><a href="#1-张量Tensor的结构" class="headerlink" title="1 张量Tensor的结构"></a><strong>1 张量Tensor的结构</strong></h2><p>在 PyTorch 0.4.0 之后，Tensor包含以下属性：</p><ul><li>data：Tensor的值；</li><li>grad：data 的梯度；</li><li>grad_fn：创建 Tensor 所使用的 Function，是自动求导的关键，因为根据所记录的函数才能计算出导数；</li><li>requires_grad：是否需要梯度，并不是所有的张量都需要计算梯度；</li><li>is_leaf：是否叶子节点（张量），叶子节点的概念在计算图中会用到；</li><li>dtype：张量的数据类型，如 torch.FloatTensor，torch.cuda.FloatTensor；</li><li>shape：张量的形状（各维度的长度）；</li><li>device：张量所在设备（CPU/GPU），可以进行切换。</li></ul><h2 id="2-Tensor的使用"><a href="#2-Tensor的使用" class="headerlink" title="2 Tensor的使用"></a><strong>2 Tensor的使用</strong></h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a><strong>创建</strong></h3><p> <strong>· 直接创建 torch.tensor</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> pin_memory<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>dtype：数据类型，默认与data一致；</p><p>pin_memory：是否存于锁页内存。</p><p> <strong>· 共享内存 torch.from_numpy</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>t <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改数组arr，张量t也会被修改。</p><p> <strong>· torch.zeros 、torch.ones：指定形状，创建全为0、1的张量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>size：张量的形状；</p><p>out：输出的张量，如果指定了out，那么返回的张量和out指向的是同一个地址；</p><p>layout：内存中布局形式，有strided，sparse_coo等。当是稀疏矩阵时，设置为sparse_coo可以减少内存占用。</p><p> <strong>· torch.zeros_like、torch.ones_like：根据输入数据的形状，创建全为0、1的张量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> memory_format<span class="token operator">=</span>torch<span class="token punctuation">.</span>preserve_format<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>· torch.full、torch.full_like：指定形状和数值，创建全为指定数值的张量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>full<span class="token punctuation">(</span>size<span class="token punctuation">,</span> fill_value<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>fill_value：张量中每一个元素的值。</p><p> <strong>· torch.arrage：创建1维等差张量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>start：数列起始值；</p><p>end：数列结束值，开区间，取不到结束值；</p><p>step：公差，默认为 1。</p><p> <strong>· torch.linspace：创建对区间等分的1维张量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> steps<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>start：数列起始值；</p><p>end：数列结束值；</p><p>step：数列长度。（元素个数）</p><p> <strong>· torch.logspace：创建对区间对数等分的1维张量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>logspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> steps<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>start：数列起始值；</p><p>end：数列结束值；</p><p>step：数列长度；（元素个数）</p><p>base：对数函数的底，默认为 10。</p><p> <strong>· torch.eye：创建单位对角矩阵（2 维张量）</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>eye<span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>n：矩阵行数。通常只设置 n，为方阵；</p><p>m：矩阵列数。</p><p><strong><em>根据概率创建Tensor</em></strong></p><p> <strong>· torch.normal：生成正态分布 (高斯分布)</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> std<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> generator<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>· torch.randn和torch.randn_like：生成标准正态分布</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>· torch.rand和torch.rand_like：在区间[0, 1)上生成均匀分布</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token operator">*</span>size<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>· torch.randint和torch.randint_like：在指定区间上生成整数均匀分布</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">randint<span class="token punctuation">(</span>low<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> high<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> generator<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> <strong>· torch.randperm：生成从0到n-1的随机排列，常用于生成索引</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>randperm<span class="token punctuation">(</span>n<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>int64<span class="token punctuation">,</span> layout<span class="token operator">=</span>torch<span class="token punctuation">.</span>strided<span class="token punctuation">,</span> device<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> requires_grad<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>· torch.bernoulli：以input为概率，生成伯努利分布（0-1 分布，两点分布）</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>bernoulli<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> generator<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>input：概率值</p><h3 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a><strong>拼接</strong></h3><p> <strong>· torch.cat：将张量按照dim维度进行拼接</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span>tensors<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>tensors：张量序列。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>t_0 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>t_1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">,</span> t<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> <strong>· torch.stack：将张量在新创建的dim维度上进行拼接</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>stack<span class="token punctuation">(</span>tensors<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="切分"><a href="#切分" class="headerlink" title="切分"></a><strong>切分</strong></h3><p> <strong>· torch.chunk：将张量按照维度dim进行平均切分</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>chunk<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> chunks<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将张量按照维度dim进行平均切分。若不能整除，则最后一份张量小于其他张量。</p><p><strong>· torch.split：将张量按照dim维度进行平均切分</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>split<span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> split_size_or_sections<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将张量按照维度dim进行平均切分。可以指定每一个分量的切分长度。</p><p>split_size_or_sections：为int时，表示每一份的长度，如果不能被整除，则最后一份张量小于其他张量；为list时，按照list元素作为每一个分量的长度切分。如果list元素之和不等于切分维度（dim）的值，就会报错；</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a><strong>索引</strong></h3><p> <strong>· torch.index_select：取出指定的数据</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>index_select<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> dim<span class="token punctuation">,</span> index<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在维度 dim 上，按照 index 索引取出数据拼接为张量返回。</p><p> <strong>· torch.mask_select：取出指定的数据</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>masked_select<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> mask<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按照mask中的True进行索引拼接得到一维张量返回，mask于input同形状，mask为布尔类型张量。</p><h3 id="变换"><a href="#变换" class="headerlink" title="变换"></a><strong>变换</strong></h3><p> <strong>· torch.reshape：变换张量的形状</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> shape<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当张量在内存中是连续时，返回的张量和原来的张量共享数据内存，改变一个变量时，另一个变量也会被改变。</p><p> <strong>· torch.transpose：交换张量的两个维度</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> dim0<span class="token punctuation">,</span> dim1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>· torch.t：转置二维张量</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>t<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <strong>· torch.squeeze：压缩长度为 1 的维度</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>dim：若为None，则移除所有长度为1的维度；若指定维度，则当且仅当该维度长度为1时可以移除。</p><p> <strong>· torch.unsqueeze：根据dim扩展维度</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> dim<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a><strong>数学运算</strong></h3><p> <strong>· torch.add：加</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> other<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>逐元素计算input + alpha * other。因为在深度学习中经常用到先乘后加的操作。</p><p> <strong>· torch.mul：乘</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>mul<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将input与b相乘，b可以为标量或者张量（总元素数目需要一致）。</p><p><strong>· torch.mean：计算均值</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> dim<span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回输入张量指定维度上的均值。</p><p> <strong>· torch.addcdiv</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>addcdiv<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> tensor1<span class="token punctuation">,</span> tensor2<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>out = input + value × tensor1/tensor2.</p><p> <strong>· torch.addcmul</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">torch<span class="token punctuation">.</span>addcmul<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> tensor1<span class="token punctuation">,</span> tensor2<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> out<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>out = input + value × tensor1 × tensor2.</p>]]></content>
      
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门</title>
      <link href="/springboot-ru-men/"/>
      <url>/springboot-ru-men/</url>
      
        <content type="html"><![CDATA[<hr><div align="center"><strong><font size="5">SpringBoot集成MyBatis项目跟学</font></strong></div><hr><h1 id="0-视频和项目"><a href="#0-视频和项目" class="headerlink" title="0. 视频和项目"></a>0. 视频和项目</h1><p>b站地址：<a href="https://www.bilibili.com/video/BV1rv411k7RD?p=42&amp;vd_source=85346763c892618d9f99bde393009687">042-案例20-集成dubbo-1_哔哩哔哩_bilibili</a></p><p>本地项目文件：/Users/mac/IdeaProjects/pro001/pro002</p><h1 id="1-详细笔记"><a href="#1-详细笔记" class="headerlink" title="1.详细笔记"></a>1.详细笔记</h1><h2 id="1-创建一个springboot框架的web项目"><a href="#1-创建一个springboot框架的web项目" class="headerlink" title="1. 创建一个springboot框架的web项目"></a>1. 创建一个springboot框架的web项目</h2><p>New Module - spring initialize (java8+jdk1.8) - 选择spring web依赖</p><p>注意pom.xml文件，是maven spring mybatis等依赖配置和插件配置</p><h2 id="2-使用核心配置文件application-properties"><a href="#2-使用核心配置文件application-properties" class="headerlink" title="2. 使用核心配置文件application.properties"></a>2. 使用核心配置文件application.properties</h2><p>application.properties  application.yml  application.yaml</p><p>多环境下的核心配置文件的使用（配置文件的命名方式）</p><ul><li>开发环境：application-dev.properties</li><li>测试环境：application-test.properties</li><li>准生产环境；application-ready.properties</li><li>生产环境：application-product.properties</li></ul><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/image.png" alt=""></p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/image1.png" alt=""></p><h2 id="3-在核心配置文件中自定义配置，并将自定义配置映射到对象"><a href="#3-在核心配置文件中自定义配置，并将自定义配置映射到对象" class="headerlink" title="3. 在核心配置文件中自定义配置，并将自定义配置映射到对象"></a>3. 在核心配置文件中自定义配置，并将自定义配置映射到对象</h2><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/%E6%88%AA%E5%B1%8F2023-07-11%2022.09.48.png" alt=""></p><p>注意核心配置文件中的命名方式，xx.xx</p><p>右上是实体类文件</p><p>右下是controller文件</p><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/image2.png" alt=""></p><h2 id="4-集成jsp"><a href="#4-集成jsp" class="headerlink" title="4. 集成jsp"></a>4. 集成jsp</h2><p>首先是pom.xml中加入jsp解析依赖</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>引入springboot内嵌tomcat对jsp的解析依赖，不添加解析不了<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        仅仅只是展示页面<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">org.apache.tomcat.embed</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">tomcat-embed-jasper</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置jsp页面资源文件夹webapp：<a href="https://www.bilibili.com/video/BV1rv411k7RD?p=19&amp;vd_source=85346763c892618d9f99bde393009687">019-案例10-springboot集成jsp-1_哔哩哔哩_bilibili</a></p><p>controller中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/sayjsp"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">sayjsp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"hello,springboot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"sayjsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mv<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-集成Mybatis"><a href="#5-集成Mybatis" class="headerlink" title="5. 集成Mybatis"></a>5. 集成Mybatis</h2><h3 id="1-添加MyBatis依赖，MySQL驱动"><a href="#1-添加MyBatis依赖，MySQL驱动" class="headerlink" title="1.  添加MyBatis依赖，MySQL驱动"></a>1.  <strong>添加MyBatis依赖，MySQL驱动</strong></h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        mysql<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">mysql</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">mysql-connector-java</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">8.0.22</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">  //注意：需要指明版本号        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        mybatis整合框架起步依赖<span class="token operator">--</span><span class="token operator">&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">org.mybatis.spring.boot</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">mybatis-spring-boot-starter</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">2.1.4</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>mybatis 代码自动生成插件<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">org.mybatis.generator</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">mybatis-generator-maven-plugin</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">1.3.6</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        &lt;!--配置文件的位置--&gt;        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configurationFile</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">GeneratorMapper.xml</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configurationFile</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>verbose</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">true</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>verbose</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overwrite</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">true</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>overwrite</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><strong>使用MyBatis提供的逆向工程生成实体bean，映射文件，DAO接口</strong><ol><li>自动生成的配置文件：GeneratorMapper.xml</li><li>使用插件自动生成（注意自动生成可能会在Mapper.xml生成两遍相同代码，会出错）</li></ol></li></ol><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/image3.png" alt=""></p><ol><li><strong>注意</strong>数据库字段名最好使用下划线形式，下面是截取Bookmapper.xml的部分（注释是笔记）</li></ol><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  id 标签只能修饰主键字段<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  result 修饰除了主键以外字段  <span class="token operator">--</span><span class="token operator">&gt;</span>      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>column 数据库中的字段名称      property 映射对象的属性名称，因此最好是将数据库的字段名称写成下划线形式 b_id，这样会转换成驼峰命名      jdbcType 列中数据库中字段的类型（可以省略不写）      <span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    resultMap的作用：        <span class="token number">1.</span>数据库与映射对象的属性名不一致，可以进行转换        <span class="token number">2.</span>当查询的结果没有一个表的时候，可以自定义一个结果集<span class="token operator">--</span><span class="token operator">&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bID<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bid<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bName<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bname<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bPrice<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DOUBLE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bprice<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bAuth<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>VARCHAR<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bauth<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bDate<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>DATE<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bdate<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bNum<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bnum<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryID<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>categoryid<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pID<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>INTEGER<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pid<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  通过include引用sql语句<span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    bID, bName, bPrice, bAuth, bDate, bNum, categoryID, pID  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>不用判断<span class="token string">""</span>只需要判断<span class="token keyword">null</span>，因为我们使用的封装类型Integer，很好地帮我们规避这个问题<span class="token operator">--</span><span class="token operator">&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectByPrimaryKey<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.Integer<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    select     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">    from Book    where bID = #</span><span class="token punctuation">{</span>bid<span class="token punctuation">,</span>jdbcType<span class="token operator">=</span><span class="token constant">INTEGER</span><span class="token punctuation">}</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>指定资源文件Mapper.xml的位置（因为BookMapper.xml没有放在resources路径下）</li></ol><p>这里有两种解决方式：</p><p>1.映射文件不在resouces下，但是与Mapper接口在同一目录下，则需要在pom中手动指定资源路径，这样才可以编译.xml文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>        手动指定文件夹为resources<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token generics"><span class="token punctuation">&lt;</span>resource<span class="token punctuation">&gt;</span></span>    <span class="token generics"><span class="token punctuation">&lt;</span>directory<span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span>/src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">&lt;</span><span class="token operator">/</span>directory<span class="token operator">&gt;</span>    <span class="token generics"><span class="token punctuation">&lt;</span>includes<span class="token punctuation">&gt;</span></span>        <span class="token generics"><span class="token punctuation">&lt;</span>include<span class="token punctuation">&gt;</span></span><span class="token operator">*</span><span class="token operator">*</span><span class="token comment">/*.xml&lt;/include&gt;    &lt;/includes&gt;&lt;/resource&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.将映射文件放在resources类路径下的mapper文件夹中，则需要在核心配置文件中说明，因为.XML与接口文件不在一起，但是不需要在pom文件中指定资源路径：（多数采用）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">#指定<span class="token class-name">Mybatis</span>映射文件的路径mybatis<span class="token punctuation">.</span>mapper<span class="token operator">-</span>locations<span class="token operator">=</span>classpath<span class="token operator">:</span>mapper<span class="token comment">/*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>主要的两个注解@Mapper，@MapperScan</li></ol><p>@Mapper 需要在每一个Mapper接口类上添加，作用是扫描DAO接口</p><p>@MapperScan 在启动入口类上添加的，扫描所有的包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"com.xjtu.pro002.dao"</span><span class="token punctuation">)</span><span class="token comment">//开启扫描Mapper接口的包以及子目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="6-项目结构"><a href="#6-项目结构" class="headerlink" title="6. 项目结构"></a>6. 项目结构</h2><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/image4.png" alt=""></p><h2 id="7-支持事务"><a href="#7-支持事务" class="headerlink" title="7. 支持事务"></a>7. 支持事务</h2><p>添加Transactional注解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span> <span class="token comment">//事务</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">Book</span> book<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-注解"><a href="#8-注解" class="headerlink" title="8. 注解"></a>8. 注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token comment">//相当于控制层类上加controller+ResponseBody,意味着返回的都是json对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="9-RESTFul风格"><a href="#9-RESTFul风格" class="headerlink" title="9. RESTFul风格"></a>9. RESTFul风格</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/update/{id}/{name}"</span><span class="token punctuation">)</span> <span class="token comment">//Restful风格 路径中最好是名词 ，</span><span class="token comment">//不是数据库表的字段的参数不需要用斜杠传参数（比如翻页</span><span class="token comment">//请求方式按照增post 删delete 改put 查get来区分</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> id<span class="token punctuation">,</span>                                <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setBid</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    book<span class="token punctuation">.</span><span class="token function">setBname</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> bookService<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> book<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://picturebed-of-hwblog.oss-cn-hangzhou.aliyuncs.com/img/image5.png" alt=""></p><h2 id="10-相关快捷键"><a href="#10-相关快捷键" class="headerlink" title="10. 相关快捷键"></a>10. 相关快捷键</h2><p>快速创建Service接口和为接口创建实现类：option+enter</p><p>快速声明对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这样的语句，快捷键是:new Book().var然后回车即可</span><span class="token class-name">Book</span> book <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Book</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
